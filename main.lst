Microsoft (R) Macro Assembler Version 14.00.23506.0	    06/03/16 15:32:26
main.asm						     Page 1 - 1


				COMMENT #
					Planilha desenvolvida em Assembly na disciplina 
					Laboratório de Arquitetura e Organizacao de Computadores 2
				    	Autor: Leandro Novak
				        
					Funcao:		Estado atual:
					cel 		Basicamente Implementada
					clr			Basicamente Implementada
					clt			Basicamente Implementada
					cop			Basicamente Implementada
					cut			Basicamente Implementada
					int			Basicamente Implementada
					max			Não Implementada
					med			Não Implementada
					min			Não Implementada
					mul			Não Implementada
					opn			Não Implementada
					sav			Não Implementada
					str			Basicamente Implementada
					sub			Basicamente Implementada
					sum			Basicamente Implementada
					ext			Basicamente Implementada
				#

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000028			CELL STRUCT
 00000000  00				typeData	BYTE 0
 00000001  FFFFFFFF			integer		SDWORD 11111111111111111111111111111111b
 00000005  00000001 [			string		BYTE "Loremipsumdolorsit", 0
	    4C 6F 72 65
	    6D 69 70 73
	    75 6D 64 6F
	    6C 6F 72 73
	    69 74 00
	   ]
 4189003E  00000001 [			formula		BYTE "123456789012345", 0
	    31 32 33 34
	    35 36 37 38
	    39 30 31 32
	    33 34 35 00
	   ]
				CELL ENDS

 = 00000028			SIZECELL	EQU 40
 = 000000F0			SIZELINE	EQU 240
 = 00000001			CELLINT		EQU 1
 = 00000005			CELLSTR		EQU 5
 = 00000018			CELLFOR		EQU 24

				; Data segment
 00000000			.data
 00000000  00000014 [		readBuffer	BYTE 20 DUP(0), 0
	    00
	   ] 00
 00000015  00000014 [		tempBuffer	BYTE 20 DUP(0), 0
	    00
	   ] 00
 0000002A 00000000		currentCell	DWORD 0
 0000002E 00000000		tempCell	DWORD 0
 00000032  00000003 [		intString1	BYTE 3 DUP(0), 0
	    00
	   ] 00
 00000036  00000003 [		intString2	BYTE 3 DUP(0), 0
	    00
	   ] 00
 0000003A  00000004 [		cellName	BYTE 4 DUP(0), 0
	    00
	   ] 00
 0000003F 00000000		cell01		DWORD 0
 00000043 00000000		cell02		DWORD 0

 00000047  00000079 [		separator	BYTE 121 DUP (" "), 0
	    20
	   ] 00
 000000C1 20 20 20 20 20	titlePlan	BYTE "                                                   Planilha ASM                                                       ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 50 6C 61 6E
	   69 6C 68 61 20
	   41 53 4D 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000138 7C 20 20 20 20	columnBar	BYTE "|        A         |        B         |        C         |        D         |        E         |        F         |", 0
	   20 20 20 20 41
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 20 42 20
	   20 20 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 20 43 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 44 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 20
	   45 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 46
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000001AC 43 45 4C 20 43	functions	BYTE "CEL CLR", 00h, "CLT", 00h, "COP CUT INT MAX MED MIN OPN SAV STR SUB SUM EXT", 00h, 0
	   4C 52 00 43 4C
	   54 00 43 4F 50
	   20 43 55 54 20
	   49 4E 54 20 4D
	   41 58 20 4D 45
	   44 20 4D 49 4E
	   20 4F 50 4E 20
	   53 41 56 20 53
	   54 52 20 53 55
	   42 20 53 55 4D
	   20 45 58 54 00
	   00
 000001E9 43 65 6C 75 6C	selectdCell	BYTE "Celula selecionada: ", 0
	   61 20 73 65 6C
	   65 63 69 6F 6E
	   61 64 61 3A 20
	   00
 000001FE 46 75 6E 63 61	viewFunc	BYTE "Funcao: ", 0
	   6F 3A 20 00
 00000207 3E 3E 20 00		inputArrow	BYTE ">> ", 0
 0000020B 20 20 20 20 20	clearSpace	BYTE "     ", 0
	   00
 00000211 20 20 20 20 20	whiteLine	BYTE "                                                                                                        ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 00
 0000027A 49 6E 76 61 6C	inputError	BYTE "Invalid input! Please type again: ", 0
	   69 64 20 69 6E
	   70 75 74 21 20
	   50 6C 65 61 73
	   65 20 74 79 70
	   65 20 61 67 61
	   69 6E 3A 20 00

				; Cell lines
 0000029D  00000006 [		line01 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000038D  00000006 [		line02 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000047D  00000006 [		line03 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000056D  00000006 [		line04 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000065D  00000006 [		line05 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000074D  00000006 [		line06 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000083D  00000006 [		line07 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000092D  00000006 [		line08 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000A1D  00000006 [		line09 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000B0D  00000006 [		line10 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000BFD  00000006 [		line11 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000CED  00000006 [		line12 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000DDD  00000006 [		line13 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000ECD  00000006 [		line14 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 00000FBD  00000006 [		line15 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 000010AD  00000006 [		line16 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000119D  00000006 [		line17 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000128D  00000006 [		line18 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000137D  00000006 [		line19 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]
 0000146D  00000006 [		line20 CELL 6 DUP(<>)
	    00 FFFFFFFF
	    00000001 [
	     746973726F6C6F646D757370696D65726F4C
	     00
	    ]
	    00000001 [
	     353433323130393837363534333231
	     00
	    ]
	   ]

 0000155D 50 45 52 49 47	teste BYTE "PERIGO!!!", 0
	   4F 21 21 21 00
				; Code segment
 00000000			.code
 00000000			main PROC
 00000000			_mainLoop:
 00000000  B9 00000001		    mov ecx, 1
 00000005  E8 0000054A			call _DrawPlan
 0000000A  E8 0000060D		    call _DrawData
 0000000F  E8 0000000B		    call _ReadInput
 00000014  E3 02		    jecxz _exitPlan
 00000016  EB E8		    jmp _mainLoop
 00000018			_exitPlan:
				    exit
 00000018  6A 00	   *	    push   +000000000h
 0000001A  E8 00000000 E   *	    call   ExitProcess
 0000001F			main ENDP

				; Funcoes de uso geral:
				; Le a entrada fornecida pelo usuario
 0000001F			_ReadInput PROC
 0000001F  E8 00000688			call _setColor1
					
 00000024  BA 00000000 R		mov edx, offset readBuffer
 00000029  B9 00000015			mov ecx, sizeof readBuffer
 0000002E  E8 00000000 E		call ReadString
 00000033  E8 000000B6			call _ClearInput		;Limpa a entrada do usuario
					invoke Str_copy, ADDR readBuffer, ADDR tempBuffer
 00000038  68 00000015 R   *	    push   OFFSET tempBuffer
 0000003D  68 00000000 R   *	    push   OFFSET readBuffer
 00000042  E8 00000000 E   *	    call   Str_copy
					invoke Str_ucase, ADDR readBuffer
 00000047  68 00000000 R   *	    push   OFFSET readBuffer
 0000004C  E8 00000000 E   *	    call   Str_ucase

					
 00000051  8B 0A			mov ecx, [edx]			;Inicia a verificacao da funcao digitada
 00000053  BB 000001AC R		mov ebx, offset functions

 00000058  3B 0B			cmp ecx, [ebx]			;CEL
 0000005A  75 05			jnz _l0
 0000005C  E8 000000A3			call _CelFunc
 00000061			_l0:	
 00000061  3B 4B 04			cmp ecx, [ebx + 4]		;CLR
 00000064  75 05			jnz _l1
 00000066  E8 0000011D			call _ClrFunc
 0000006B			_l1:	
 0000006B  3B 4B 08			cmp ecx, [ebx + 8]		;CLT
 0000006E  75 05			jnz _l2
 00000070  E8 00000134			call _CltFunc
 00000075			_l2:	
 00000075  3B 4B 0C			cmp ecx, [ebx + 12]		;COP
 00000078  75 05			jnz _l3
 0000007A  E8 00000147			call _CopFunc
 0000007F			_l3:	
 0000007F  3B 4B 10			cmp ecx, [ebx + 16]		;CUT
 00000082  75 05			jnz _l4
 00000084  E8 00000203			call _CutFunc
 00000089			_l4:	
 00000089  3B 4B 14			cmp ecx, [ebx + 20]		;INT
 0000008C  75 05			jnz _l5
 0000008E  E8 000002D7			call _IntFunc
 00000093			_l5:	
 00000093  3B 4B 18			cmp ecx, [ebx + 24]		;MAX
 00000096  75 05			jnz _l6
 00000098  E8 00000304			call _MaxFunc
 0000009D			_l6:	
 0000009D  3B 4B 1C			cmp ecx, [ebx + 28]		;MED
 000000A0  75 05			jnz _l7
 000000A2  E8 000002FB			call _MedFunc
 000000A7			_l7:	
 000000A7  3B 4B 20			cmp ecx, [ebx + 32]		;MIN
 000000AA  75 05			jnz _l8
 000000AC  E8 000002F2			call _MinFunc
 000000B1			_l8:	
 000000B1  3B 4B 24			cmp ecx, [ebx + 36]		;OPN
 000000B4  75 05			jnz _l9
 000000B6  E8 000002E9			call _OpnFunc
 000000BB			_l9:	
 000000BB  3B 4B 28			cmp ecx, [ebx + 40]		;SAV
 000000BE  75 05			jnz _lA
 000000C0  E8 000002E0			call _SavFunc
 000000C5			_lA:	
 000000C5  3B 4B 2C			cmp ecx, [ebx + 44]		;STR
 000000C8  75 05			jnz _lB
 000000CA  E8 000002D7			call _StrFunc
 000000CF			_lB:	
 000000CF  3B 4B 30			cmp ecx, [ebx + 48]		;SUB
 000000D2  75 05			jnz _lC
 000000D4  E8 00000313			call _SubFunc
 000000D9			_lC:	
 000000D9  3B 4B 34			cmp ecx, [ebx + 52]		;SUM
 000000DC  75 05			jnz _lD
 000000DE  E8 000003BD			call _SumFunc
 000000E3			_lD:	
 000000E3  3B 4B 38			cmp ecx, [ebx + 56]		;EXT
 000000E6  75 05			jnz _lE
 000000E8  B9 00000000			mov ecx, 0
 000000ED			_lE:
					
 000000ED  C3				ret
 000000EE			_ReadInput ENDP

				; Limpa a linha de entrada de usuário
 000000EE			_ClearInput PROC uses edx
 000000EE  52		   *	    push   edx
 000000EF  B6 1C			mov dh, 28
 000000F1  B2 04			mov dl, 4
 000000F3  E8 00000000 E		call Gotoxy
 000000F8  BA 00000211 R		mov edx, offset WhiteLine
 000000FD  E8 00000000 E		call WriteString
					ret
 00000102  5A		   *	    pop    edx
 00000103  C3		   *	    ret    00000h
 00000104			_ClearInput ENDP

				; CELFUNC: Seleciona a celula informada pelo usuario
				; Recebe em edx a entrada fornecida pelo usuario
 00000104			_CelFunc PROC uses eax ebx ecx edx
 00000104  50		   *	    push   eax
 00000105  53		   *	    push   ebx
 00000106  51		   *	    push   ecx
 00000107  52		   *	    push   edx
 00000108  8B 42 05			mov eax, [edx + 5]				;move para eax o nome da celula. ex: 01
 0000010B  B9 00000032 R		mov ecx, offset intString1
 00000110  89 01			mov [ecx], eax
 00000112  52				push edx
 00000113  BA 00000032 R		mov edx, offset intString1		;transforma o conteudo de intString1 em um decimal e retorna em eax
 00000118  B9 00000003			mov ecx, 3
 0000011D  E8 00000000 E		call ParseDecimal32
 00000122  5A				pop edx
 00000123  48				dec eax
 00000124  83 F8 00			cmp eax, 0
 00000127  72 1C			jb _error1
 00000129  83 F8 13			cmp eax, 19
 0000012C  77 17			ja _error1
 0000012E  50				push eax	
 0000012F  B9 00000000			mov ecx, 0
 00000134  66| 0F B6 4A			movzx cx, BYTE PTR [edx + 4]
	   04
 00000139  66| 83 F9 41			cmp cx, 'A'
 0000013D  72 44			jb _notValid
 0000013F  66| 83 F9 5A			cmp cx, 'Z'
 00000143  72 02			jb _continue1
 00000145			_error1:
 00000145  EB 3C			jmp _notValid
 00000147			_continue1:
 00000147  66| 83 E9 41			sub cx, 41h
 0000014B  B8 00000000			mov eax, 0
 00000150  66| B8 0028			mov ax, SIZECELL
 00000154  66| F7 E1			mul cx							;retorna em ax a coluna da celula como um inteiro binario
 00000157  0F B7 CA			movzx ecx, dx
 0000015A  C1 E1 10			shl ecx, 16
 0000015D  66| 8B C8			mov cx, ax						; o valor esta salvo em ecx
 00000160  58				pop eax							;traz de volta para eax a posicao da linha
 00000161  51				push ecx
 00000162  66| BA 00F0			mov dx, SIZELINE
 00000166  66| F7 E2			mul dx
 00000169  0F B7 CA			movzx ecx, dx
 0000016C  C1 E1 10			shl ecx, 16
 0000016F  66| 8B C8			mov cx, ax
 00000172  58				pop eax
 00000173  03 C1			add eax, ecx					;deslocamento total para a celula selecionada
 00000175  B9 0000029D R		mov ecx, offset line01
 0000017A  03 C8			add ecx, eax
 0000017C  BB 0000002A R		mov ebx, offset currentCell
 00000181  89 0B			mov [ebx], ecx
 00000183			_notValid:
					ret
 00000183  5A		   *	    pop    edx
 00000184  59		   *	    pop    ecx
 00000185  5B		   *	    pop    ebx
 00000186  58		   *	    pop    eax
 00000187  C3		   *	    ret    00000h
 00000188			_CelFunc ENDP

				; CLRFUNC: Limpa o conteudo da celula previamente selecionada
				; Não recebe nada como parametro
 00000188			_ClrFunc PROC uses eax ebx ecx edx
 00000188  50		   *	    push   eax
 00000189  53		   *	    push   ebx
 0000018A  51		   *	    push   ecx
 0000018B  52		   *	    push   edx
 0000018C  A1 0000002A R		mov eax, currentCell
 00000191  BB 00000000			mov ebx, 0
 00000196  3B D8			cmp ebx, eax
 00000198  74 0A			jz _error
 0000019A  B9 00000024			mov ecx, 36
 0000019F			_clear:
 0000019F  89 18			mov [eax], ebx 
 000001A1  40				inc eax
 000001A2  E2 FB			loop _clear
 000001A4			_error:
					ret
 000001A4  5A		   *	    pop    edx
 000001A5  59		   *	    pop    ecx
 000001A6  5B		   *	    pop    ebx
 000001A7  58		   *	    pop    eax
 000001A8  C3		   *	    ret    00000h
 000001A9			_ClrFunc ENDP

				; CLTFUNC: Limpa todas as celulas da tabela
				; Não recebe nada como parametro
 000001A9			_CltFunc PROC uses eax ebx ecx edx
 000001A9  50		   *	    push   eax
 000001AA  53		   *	    push   ebx
 000001AB  51		   *	    push   ecx
 000001AC  52		   *	    push   edx
 000001AD  B8 0000029D R		mov eax, offset line01
 000001B2  B9 000012C0			mov ecx, 4800
					;mov ecx, 120
 000001B7  BB 00000000			mov ebx, 0
 000001BC			_clear:
 000001BC  88 18			mov [eax], bl
 000001BE  40				inc eax
 000001BF  E2 FB			loop _clear
					ret
 000001C1  5A		   *	    pop    edx
 000001C2  59		   *	    pop    ecx
 000001C3  5B		   *	    pop    ebx
 000001C4  58		   *	    pop    eax
 000001C5  C3		   *	    ret    00000h
 000001C6			_CltFunc ENDP

				; COPFUNC: Copia o conteudo de uma celula para outra
				; Recebe a funcao de copia como parametro em edx
 000001C6			_CopFunc PROC uses eax ebx ecx edx
 000001C6  50		   *	    push   eax
 000001C7  53		   *	    push   ebx
 000001C8  51		   *	    push   ecx
 000001C9  52		   *	    push   edx
 000001CA  A1 0000002A R		mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 000001CF  BB 00000000			mov ebx, 0
 000001D4  3B D8			cmp ebx, eax
 000001D6  74 3D			jz _error1
 000001D8  8B 42 05			mov eax, [edx + 5]				;move para eax o nome da celula. ex: 01
 000001DB  B9 00000036 R		mov ecx, offset intString2
 000001E0  89 01			mov [ecx], eax
 000001E2  52				push edx
 000001E3  BA 00000036 R		mov edx, offset intString2		;transforma o conteudo de intString1 em um decimal e retorna em eax
 000001E8  B9 00000003			mov ecx, 3
 000001ED  E8 00000000 E		call ParseDecimal32
 000001F2  5A				pop edx
 000001F3  48				dec eax
 000001F4  83 F8 00			cmp eax, 0
 000001F7  72 1C			jb _error1
 000001F9  83 F8 13			cmp eax, 19
 000001FC  77 17			ja _error1
 000001FE  50				push eax	
 000001FF  B9 00000000			mov ecx, 0
 00000204  66| 0F B6 4A			movzx cx, BYTE PTR [edx + 4]
	   04
 00000209  66| 83 F9 41			cmp cx, 'A'
 0000020D  72 78			jb _notValid
 0000020F  66| 83 F9 5A			cmp cx, 'Z'
 00000213  72 02			jb _continue1
 00000215			_error1:
 00000215  EB 70			jmp _notValid
 00000217			_continue1:
 00000217  66| 83 E9 41			sub cx, 41h
 0000021B  B8 00000000			mov eax, 0
 00000220  66| B8 0028			mov ax, SIZECELL
 00000224  66| F7 E1			mul cx							;retorna em ax a coluna da celula como um inteiro binario
 00000227  0F B7 CA			movzx ecx, dx
 0000022A  C1 E1 10			shl ecx, 16
 0000022D  66| 8B C8			mov cx, ax						; o valor esta salvo em ecx
 00000230  58				pop eax							;traz de volta para eax a posicao da linha
 00000231  51				push ecx
 00000232  66| BA 00F0			mov dx, SIZELINE
 00000236  66| F7 E2			mul dx
 00000239  0F B7 CA			movzx ecx, dx
 0000023C  C1 E1 10			shl ecx, 16
 0000023F  66| 8B C8			mov cx, ax
 00000242  58				pop eax
 00000243  03 C1			add eax, ecx					;deslocamento total para a celula selecionada
 00000245  B9 0000029D R		mov ecx, offset line01
 0000024A  03 C8			add ecx, eax
 0000024C  BB 0000002E R		mov ebx, offset tempCell
 00000251  89 0B			mov [ebx], ecx

 00000253  A1 0000002A R		mov eax, currentCell
 00000258  8B 1D 0000002E R		mov ebx, tempCell
 0000025E  3B D8			cmp ebx, eax
 00000260  74 25			jz _notValid
 00000262  B9 00000027			mov ecx, SIZECELL - 1
 00000267  BA 00000000			mov edx, 0
 0000026C			_move:								; Copia byte a byte o conteudo de uma celula para outra
 0000026C  8A 13			mov dl, [ebx]
 0000026E  88 10			mov [eax], dl
 00000270  43				inc ebx
 00000271  40				inc eax
 00000272  E2 F8			loop _move
 00000274  B9 00000000			mov ecx, 0
 00000279  B8 0000002A R		mov eax, offset currentCell
 0000027E  89 08			mov [eax], ecx
 00000280  BB 0000002E R		mov ebx, offset tempCell
 00000285  89 0B			mov [ebx], ecx
 00000287			_notValid:	
					ret
 00000287  5A		   *	    pop    edx
 00000288  59		   *	    pop    ecx
 00000289  5B		   *	    pop    ebx
 0000028A  58		   *	    pop    eax
 0000028B  C3		   *	    ret    00000h
 0000028C			_CopFunc ENDP

				; COPFUNC: Copia o conteudo de uma celula para outra, limpando a celula de origem
				; Recebe a funcao de recorte como parametro em edx
 0000028C			_CutFunc PROC uses eax ebx ecx edx
 0000028C  50		   *	    push   eax
 0000028D  53		   *	    push   ebx
 0000028E  51		   *	    push   ecx
 0000028F  52		   *	    push   edx
 00000290  A1 0000002A R		mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 00000295  BB 00000000			mov ebx, 0
 0000029A  3B D8			cmp ebx, eax
 0000029C  74 41			jz _error1
 0000029E  8B 42 05			mov eax, [edx + 5]				;move para eax o nome da celula. ex: 01
 000002A1  B9 00000036 R		mov ecx, offset intString2
 000002A6  89 01			mov [ecx], eax
 000002A8  52				push edx
 000002A9  BA 00000036 R		mov edx, offset intString2		;transforma o conteudo de intString1 em um decimal e retorna em eax
 000002AE  B9 00000003			mov ecx, 3
 000002B3  E8 00000000 E		call ParseDecimal32
 000002B8  5A				pop edx
 000002B9  48				dec eax
 000002BA  83 F8 00			cmp eax, 0
 000002BD  72 20			jb _error1
 000002BF  83 F8 13			cmp eax, 19
 000002C2  77 1B			ja _error1
 000002C4  50				push eax	
 000002C5  B9 00000000			mov ecx, 0
 000002CA  66| 0F B6 4A			movzx cx, BYTE PTR [edx + 4]
	   04
 000002CF  66| 83 F9 41			cmp cx, 'A'
 000002D3  0F 82 0000008C		jb _notValid
 000002D9  66| 83 F9 5A			cmp cx, 'Z'
 000002DD  72 05			jb _continue1
 000002DF			_error1:
 000002DF  E9 00000081			jmp _notValid
 000002E4			_continue1:
 000002E4  66| 83 E9 41			sub cx, 41h
 000002E8  B8 00000000			mov eax, 0
 000002ED  66| B8 0028			mov ax, SIZECELL
 000002F1  66| F7 E1			mul cx							;retorna em ax a coluna da celula como um inteiro binario
 000002F4  0F B7 CA			movzx ecx, dx
 000002F7  C1 E1 10			shl ecx, 16
 000002FA  66| 8B C8			mov cx, ax						; o valor esta salvo em ecx
 000002FD  58				pop eax							;traz de volta para eax a posicao da linha
 000002FE  51				push ecx
 000002FF  66| BA 00F0			mov dx, SIZELINE
 00000303  66| F7 E2			mul dx
 00000306  0F B7 CA			movzx ecx, dx
 00000309  C1 E1 10			shl ecx, 16
 0000030C  66| 8B C8			mov cx, ax
 0000030F  58				pop eax
 00000310  03 C1			add eax, ecx					;deslocamento total para a celula selecionada
 00000312  B9 0000029D R		mov ecx, offset line01
 00000317  03 C8			add ecx, eax
 00000319  BB 0000002E R		mov ebx, offset tempCell
 0000031E  89 0B			mov [ebx], ecx
 00000320  A1 0000002A R		mov eax, currentCell
 00000325  8B 1D 0000002E R		mov ebx, tempCell
 0000032B  3B D8			cmp ebx, eax
 0000032D  74 36			jz _notValid
 0000032F  B9 00000027			mov ecx, SIZECELL - 1
 00000334  BA 00000000			mov edx, 0
 00000339			_move:								; Copia byte a byte o conteudo de uma celula para outra
 00000339  8A 13			mov dl, [ebx]
 0000033B  88 10			mov [eax], dl
 0000033D  43				inc ebx
 0000033E  40				inc eax
 0000033F  E2 F8			loop _move
 00000341  B9 00000000			mov ecx, 0
 00000346  B8 0000002A R		mov eax, offset currentCell
 0000034B  89 08			mov [eax], ecx
 0000034D  A1 0000002E R		mov eax, tempCell
 00000352  BB 00000000			mov ebx, 0
 00000357  3B D8			cmp ebx, eax
 00000359  74 0A			jz _notValid
 0000035B  B9 00000024			mov ecx, 36
 00000360			_clear:								; Limpa a celula de origem
 00000360  89 18			mov [eax], ebx 
 00000362  40				inc eax
 00000363  E2 FB			loop _clear
 00000365			_notValid:
					ret
 00000365  5A		   *	    pop    edx
 00000366  59		   *	    pop    ecx
 00000367  5B		   *	    pop    ebx
 00000368  58		   *	    pop    eax
 00000369  C3		   *	    ret    00000h
 0000036A			_CutFunc ENDP

				; INTFUNC: Armazena um numero inteiro na celula previamente selecionada pelo usuario
				; Recebe a funcao de insercao de inteiro como parametro em edx
 0000036A			_IntFunc PROC uses eax ebx ecx edx
 0000036A  50		   *	    push   eax
 0000036B  53		   *	    push   ebx
 0000036C  51		   *	    push   ecx
 0000036D  52		   *	    push   edx
 0000036E  A1 0000002A R		mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 00000373  BB 00000000			mov ebx, 0
 00000378  3B D8			cmp ebx, eax
 0000037A  74 20			jz _error1
 0000037C  BB 00000001			mov ebx, 1
 00000381  88 18			mov [eax], bl
 00000383  83 C0 01			add eax, CELLINT
 00000386  8B D8			mov ebx, eax
 00000388  BA 00000000 R		mov edx, offset readBuffer
 0000038D  83 C2 04			add edx, 4
 00000390  B9 0000000A			mov ecx, 10
 00000395  E8 00000000 E		call ParseInteger32
 0000039A  89 03			mov [ebx], eax
 0000039C			_error1:
					ret
 0000039C  5A		   *	    pop    edx
 0000039D  59		   *	    pop    ecx
 0000039E  5B		   *	    pop    ebx
 0000039F  58		   *	    pop    eax
 000003A0  C3		   *	    ret    00000h
 000003A1			_IntFunc ENDP

 000003A1			_MaxFunc PROC
 000003A1  C3				ret
 000003A2			_MaxFunc ENDP

 000003A2			_MedFunc PROC
 000003A2  C3				ret
 000003A3			_MedFunc ENDP

 000003A3			_MinFunc PROC
 000003A3  C3				ret
 000003A4			_MinFunc ENDP

 000003A4			_OpnFunc PROC
 000003A4  C3				ret
 000003A5			_OpnFunc ENDP

 000003A5			_SavFunc PROC
 000003A5  C3				ret
 000003A6			_SavFunc ENDP

				; STRFUNC: Armazena uma string na celula previamente selecionada pelo usuario
				; Obtem a string a partir da copia da entrada de usuario
 000003A6			_StrFunc PROC uses eax ebx ecx edx esi
 000003A6  50		   *	    push   eax
 000003A7  53		   *	    push   ebx
 000003A8  51		   *	    push   ecx
 000003A9  52		   *	    push   edx
 000003AA  56		   *	    push   esi
 000003AB  A1 0000002A R		mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 000003B0  BB 00000000			mov ebx, 0
 000003B5  3B D8			cmp ebx, eax
 000003B7  74 2D			jz _error1
 000003B9  BB 00000002			mov ebx, 2
 000003BE  89 18			mov [eax], ebx
 000003C0  83 C0 05			add eax, CELLSTR
 000003C3  BA 00000015 R		mov edx, offset tempBuffer
 000003C8  83 C2 04			add edx, 4
 000003CB  B9 00000012			mov ecx, 18
 000003D0  BB 00000000			mov ebx, 0
 000003D5  BE 0000000A			mov esi, 0Ah
 000003DA			_copy:
 000003DA  39 32			cmp [edx], esi
 000003DC  74 08			jz _error1
 000003DE  8A 1A			mov bl, [edx]
 000003E0  88 18			mov [eax], bl
 000003E2  40				inc eax
 000003E3  42				inc edx
 000003E4  E2 F4			loop _copy
 000003E6			_error1:
					ret
 000003E6  5E		   *	    pop    esi
 000003E7  5A		   *	    pop    edx
 000003E8  59		   *	    pop    ecx
 000003E9  5B		   *	    pop    ebx
 000003EA  58		   *	    pop    eax
 000003EB  C3		   *	    ret    00000h
 000003EC			_StrFunc ENDP

				; SUBFUNC: Subtrai da celula destino o valor da celula origem
				; Recebe a funcao de subtracao como parametro em edx
 000003EC			_SubFunc PROC uses eax ebx ecx edx
 000003EC  50		   *	    push   eax
 000003ED  53		   *	    push   ebx
 000003EE  51		   *	    push   ecx
 000003EF  52		   *	    push   edx
 000003F0  A1 0000002A R	mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 000003F5  BB 00000000			mov ebx, 0
 000003FA  3B D8			cmp ebx, eax
 000003FC  74 3D			jz _error1
 000003FE  8B 42 05			mov eax, [edx + 5]				;move para eax o nome da celula. ex: 01
 00000401  B9 00000036 R		mov ecx, offset intString2
 00000406  89 01			mov [ecx], eax
 00000408  52				push edx
 00000409  BA 00000036 R		mov edx, offset intString2		;transforma o conteudo de intString1 em um decimal e retorna em eax
 0000040E  B9 00000003			mov ecx, 3
 00000413  E8 00000000 E		call ParseDecimal32
 00000418  5A				pop edx
 00000419  48				dec eax
 0000041A  83 F8 00			cmp eax, 0
 0000041D  72 1C			jb _error1
 0000041F  83 F8 13			cmp eax, 19
 00000422  77 17			ja _error1
 00000424  50				push eax	
 00000425  B9 00000000			mov ecx, 0
 0000042A  66| 0F B6 4A			movzx cx, BYTE PTR [edx + 4]
	   04
 0000042F  66| 83 F9 41			cmp cx, 'A'
 00000433  72 66			jb _notValid
 00000435  66| 83 F9 5A			cmp cx, 'Z'
 00000439  72 02			jb _continue1
 0000043B			_error1:
 0000043B  EB 5E			jmp _notValid
 0000043D			_continue1:
 0000043D  66| 83 E9 41			sub cx, 41h
 00000441  B8 00000000			mov eax, 0
 00000446  66| B8 0028			mov ax, SIZECELL
 0000044A  66| F7 E1			mul cx							;retorna em ax a coluna da celula como um inteiro binario
 0000044D  0F B7 CA			movzx ecx, dx
 00000450  C1 E1 10			shl ecx, 16
 00000453  66| 8B C8			mov cx, ax						; o valor esta salvo em ecx
 00000456  58				pop eax							;traz de volta para eax a posicao da linha
 00000457  51				push ecx
 00000458  66| BA 00F0			mov dx, SIZELINE
 0000045C  66| F7 E2			mul dx
 0000045F  0F B7 CA			movzx ecx, dx
 00000462  C1 E1 10			shl ecx, 16
 00000465  66| 8B C8			mov cx, ax
 00000468  58				pop eax
 00000469  03 C1			add eax, ecx					;deslocamento total para a celula selecionada
 0000046B  B9 0000029D R		mov ecx, offset line01
 00000470  03 C8			add ecx, eax
 00000472  BB 0000002E R		mov ebx, offset tempCell
 00000477  89 0B			mov [ebx], ecx
 00000479  8B 1D 0000002E R		mov ebx, tempCell
 0000047F  A1 0000002A R		mov eax, currentCell
 00000484  BA 00000001			mov edx, 1
 00000489  38 10			cmp [eax], dl
 0000048B  75 0E			jne _notValid
 0000048D  38 13			cmp [ebx], dl
 0000048F  75 0A			jne _notValid
 00000491  83 C0 01			add eax, CELLINT
 00000494  83 C3 01			add ebx, CELLINT
 00000497  8B 13			mov edx, [ebx]
 00000499  29 10			sub [eax], edx
 0000049B			_notValid:
					ret
 0000049B  5A		   *	    pop    edx
 0000049C  59		   *	    pop    ecx
 0000049D  5B		   *	    pop    ebx
 0000049E  58		   *	    pop    eax
 0000049F  C3		   *	    ret    00000h
 000004A0			_SubFunc ENDP

				; SUBFUNC: Soma da celula destino o valor da celula origem
				; Recebe a funcao de soma como parametro em edx
 000004A0			_SumFunc PROC uses eax ebx ecx edx
 000004A0  50		   *	    push   eax
 000004A1  53		   *	    push   ebx
 000004A2  51		   *	    push   ecx
 000004A3  52		   *	    push   edx
 000004A4  A1 0000002A R		mov eax, currentCell			; Se a celula de destino estiver vazia, salta como erro
 000004A9  BB 00000000			mov ebx, 0
 000004AE  3B D8			cmp ebx, eax
 000004B0  74 3D			jz _error1
 000004B2  8B 42 05			mov eax, [edx + 5]				;move para eax o nome da celula. ex: 01
 000004B5  B9 00000036 R		mov ecx, offset intString2
 000004BA  89 01			mov [ecx], eax
 000004BC  52				push edx
 000004BD  BA 00000036 R		mov edx, offset intString2		;transforma o conteudo de intString1 em um decimal e retorna em eax
 000004C2  B9 00000003			mov ecx, 3
 000004C7  E8 00000000 E		call ParseDecimal32
 000004CC  5A				pop edx
 000004CD  48				dec eax
 000004CE  83 F8 00			cmp eax, 0
 000004D1  72 1C			jb _error1
 000004D3  83 F8 13			cmp eax, 19
 000004D6  77 17			ja _error1
 000004D8  50				push eax	
 000004D9  B9 00000000			mov ecx, 0
 000004DE  66| 0F B6 4A			movzx cx, BYTE PTR [edx + 4]
	   04
 000004E3  66| 83 F9 41			cmp cx, 'A'
 000004E7  72 66			jb _notValid
 000004E9  66| 83 F9 5A			cmp cx, 'Z'
 000004ED  72 02			jb _continue1
 000004EF			_error1:
 000004EF  EB 5E			jmp _notValid
 000004F1			_continue1:
 000004F1  66| 83 E9 41			sub cx, 41h
 000004F5  B8 00000000			mov eax, 0
 000004FA  66| B8 0028			mov ax, SIZECELL
 000004FE  66| F7 E1			mul cx							;retorna em ax a coluna da celula como um inteiro binario
 00000501  0F B7 CA			movzx ecx, dx
 00000504  C1 E1 10			shl ecx, 16
 00000507  66| 8B C8			mov cx, ax						; o valor esta salvo em ecx
 0000050A  58				pop eax							;traz de volta para eax a posicao da linha
 0000050B  51				push ecx
 0000050C  66| BA 00F0			mov dx, SIZELINE
 00000510  66| F7 E2			mul dx
 00000513  0F B7 CA			movzx ecx, dx
 00000516  C1 E1 10			shl ecx, 16
 00000519  66| 8B C8			mov cx, ax
 0000051C  58				pop eax
 0000051D  03 C1			add eax, ecx					;deslocamento total para a celula selecionada
 0000051F  B9 0000029D R		mov ecx, offset line01
 00000524  03 C8			add ecx, eax
 00000526  BB 0000002E R		mov ebx, offset tempCell
 0000052B  89 0B			mov [ebx], ecx
 0000052D  8B 1D 0000002E R		mov ebx, tempCell
 00000533  A1 0000002A R		mov eax, currentCell
 00000538  BA 00000001			mov edx, 1
 0000053D  38 10			cmp [eax], dl
 0000053F  75 0E			jne _notValid
 00000541  38 13			cmp [ebx], dl
 00000543  75 0A			jne _notValid
 00000545  83 C0 01			add eax, CELLINT
 00000548  83 C3 01			add ebx, CELLINT
 0000054B  8B 13			mov edx, [ebx]
 0000054D  01 10			add [eax], edx
 0000054F			_notValid:
					ret
 0000054F  5A		   *	    pop    edx
 00000550  59		   *	    pop    ecx
 00000551  5B		   *	    pop    ebx
 00000552  58		   *	    pop    eax
 00000553  C3		   *	    ret    00000h
 00000554			_SumFunc ENDP

				; Funcoes de interface
				; Exibe a base da planilha
 00000554			_DrawPlan PROC uses eax ebx ecx edx esi
 00000554  50		   *	    push   eax
 00000555  53		   *	    push   ebx
 00000556  51		   *	    push   ecx
 00000557  52		   *	    push   edx
 00000558  56		   *	    push   esi
 00000559  B6 00			mov dh, 0
 0000055B  B2 00			mov dl, 0
 0000055D  E8 00000000 E		call Gotoxy
 00000562  E8 00000145			call _setColor1
 00000567  E8 00000000 E		call Clrscr
 0000056C  E8 00000146			call _setColor2
 00000571  BA 00000047 R		mov edx, offset separator		; Desenha uma linha em "branco" abaixo do titulo
 00000576  E8 00000000 E		call WriteString
 0000057B  BA 000000C1 R		mov edx, offset titlePlan		; Desenha o titulo da planilha
 00000580  E8 00000000 E		call WriteString
 00000585  BA 00000047 R		mov edx, offset separator		; Desenha uma linha em "branco" abaixo do titulo
 0000058A  E8 00000000 E		call WriteString
 0000058F  E8 00000118			call _setColor1					; Desenha a saida da funcao presente na celula
 00000594  E8 00000000 E		call Crlf
 00000599  BA 000001FE R		mov edx, offset viewFunc
 0000059E  E8 00000000 E		call WriteString
 000005A3  E8 00000000 E		call Crlf
 000005A8  E8 0000010A			call _setColor2
 000005AD  BA 0000020B R		mov edx, offset clearSpace		; Desenha as a base das linhas da tabela
 000005B2  E8 00000000 E		call WriteString
 000005B7  BA 00000138 R		mov edx, offset columnBar
 000005BC  E8 00000000 E		call WriteString
 000005C1  B9 00000014			mov ecx, 20
 000005C6  BA 0000020B R		mov edx, offset clearSpace
 000005CB			_drawSideBar:						; Desenha as colunas da tabela
 000005CB  E8 00000000 E		call WriteString
 000005D0  E8 00000000 E		call Crlf
 000005D5  E2 F4			loop _drawSideBar
 000005D7  B6 06			mov dh, 6
 000005D9  B2 01			mov dl, 1
 000005DB  B8 00000001			mov eax, 1b
 000005E0  B9 00000014			mov ecx, 20	
 000005E5			_drawLines:							; Desenha as linhas da tabela
 000005E5  E8 00000000 E		call GotoXY
 000005EA  E8 00000000 E		call WriteDec
 000005EF  E8 00000000 E		call Crlf
 000005F4  40				inc eax
 000005F5  FE C6			inc dh
 000005F7  E2 EC			loop _drawLines
 000005F9  B8 00000017			mov eax, 00010111b				; Exibe as setas de entrada de usuario
 000005FE  E8 00000000 E		call SetTextColor
 00000603  B6 1C			mov dh, 28
 00000605  B2 01			mov dl, 1
 00000607  E8 00000000 E		call GotoXY
 0000060C  BA 00000207 R		mov edx, offset inputArrow
 00000611  E8 00000000 E		call WriteString
					ret
 00000616  5E		   *	    pop    esi
 00000617  5A		   *	    pop    edx
 00000618  59		   *	    pop    ecx
 00000619  5B		   *	    pop    ebx
 0000061A  58		   *	    pop    eax
 0000061B  C3		   *	    ret    00000h
 0000061C			_DrawPlan ENDP

				; Exibe nas celulas da planilha o conteudo existente em cada uma delas
				; Verifica para cada celula o tipo de conteudo existente nesta
 0000061C			_DrawData PROC uses eax ebx ecx edx esi
 0000061C  50		   *	    push   eax
 0000061D  53		   *	    push   ebx
 0000061E  51		   *	    push   ecx
 0000061F  52		   *	    push   edx
 00000620  56		   *	    push   esi
 00000621  E8 00000086			call _setColor1
 00000626  B6 03			mov dh, 3
 00000628  B2 00			mov dl, 0
 0000062A  E8 00000000 E		call gotoxy
 0000062F  BA 000001E9 R		mov edx, offset selectdCell
 00000634  E8 00000000 E		call WriteString
 00000639  BA 0000003A R		mov edx, offset cellName
 0000063E  E8 00000000 E		call WriteString
 00000643  B6 06			mov dh, 6
 00000645  B2 06			mov dl, 6
 00000647  B8 0000029D R		mov eax, offset line01
 0000064C  B9 00000014			mov ecx, 20
 00000651			_drawLines:
 00000651  51				push ecx
 00000652  B9 00000006			mov ecx, 6
 00000657			_drawColumns:
 00000657  51				push ecx
 00000658  E8 00000000 E		call gotoxy
 0000065D			_verifyType:
 0000065D  0F B6 08			movzx ecx, BYTE PTR [eax]
 00000660  E3 26			jecxz _drawNothing
 00000662  83 F9 01			cmp ecx, 1
 00000665  74 07			jz _drawIntegers
 00000667  83 F9 02			cmp ecx, 2
 0000066A  74 10			jz _drawStrings
 0000066C  EB 1A			jmp _drawNothing
 0000066E			_drawIntegers:
 0000066E  50				push eax
 0000066F  5B				pop ebx
 00000670  8B 43 01			mov eax, [ebx + CELLINT]
 00000673  E8 00000000 E		call WriteInt
 00000678  53				push ebx
 00000679  58				pop eax	
 0000067A  EB 0C			jmp _drawNothing
 0000067C			_drawStrings:
 0000067C  52				push edx
 0000067D  8B D0			mov edx, eax
 0000067F  83 C2 05			add edx, CELLSTR
 00000682  E8 00000000 E		call WriteString
 00000687  5A				pop edx
 00000688			_drawNothing:
 00000688  59				pop ecx
 00000689  80 C2 13			add dl, 19
 0000068C  80 FA 78			cmp dl, 78h
 0000068F  75 04			jnz _continue
 00000691  B2 06			mov dl, 6
 00000693  FE C6			inc dh
 00000695			_continue:
 00000695  83 C0 28			add eax, SIZECELL
 00000698  E2 BD			loop _drawColumns
 0000069A  59				pop ecx
 0000069B  E2 B4			loop _drawLines
 0000069D  B6 1C			mov dh, 28
 0000069F  B2 04			mov dl, 4
 000006A1  E8 00000000 E		call gotoxy
					ret
 000006A6  5E		   *	    pop    esi
 000006A7  5A		   *	    pop    edx
 000006A8  59		   *	    pop    ecx
 000006A9  5B		   *	    pop    ebx
 000006AA  58		   *	    pop    eax
 000006AB  C3		   *	    ret    00000h
 000006AC			_DrawData ENDP

				; Funcao para atribuir cor a planilha
 000006AC			_SetColor1 PROC
 000006AC  B8 00000017			mov eax, 17h
 000006B1  E8 00000000 E		call SetTextColor
 000006B6  C3				ret
 000006B7			_SetColor1 ENDP

				; Outra funcao para atribuir cor a planilha
 000006B7			_SetColor2 PROC
 000006B7  B8 00000071			mov eax, 71h
 000006BC  E8 00000000 E		call SetTextColor
 000006C1  C3				ret
 000006C2			_SetColor2 ENDP
				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    06/03/16 15:32:26
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CELL . . . . . . . . . . . . . .	 00000028
  typeData . . . . . . . . . . .	 00000000	 Byte
  integer  . . . . . . . . . . .	 00000001	 DWord
  string . . . . . . . . . . . .	 00000005	 Byte
  formula  . . . . . . . . . . .	 00000018	 Byte
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001567 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006C2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_CelFunc . . . . . . . . . . . .	P Near	 00000104 _TEXT	Length= 00000084 Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 00000145 _TEXT	
  _continue1 . . . . . . . . . .	L Near	 00000147 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000183 _TEXT	
_ClearInput  . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000016 Public STDCALL
_ClrFunc . . . . . . . . . . . .	P Near	 00000188 _TEXT	Length= 00000021 Public STDCALL
  _clear . . . . . . . . . . . .	L Near	 0000019F _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
_CltFunc . . . . . . . . . . . .	P Near	 000001A9 _TEXT	Length= 0000001D Public STDCALL
  _clear . . . . . . . . . . . .	L Near	 000001BC _TEXT	
_CopFunc . . . . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 000000C6 Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 00000215 _TEXT	
  _continue1 . . . . . . . . . .	L Near	 00000217 _TEXT	
  _move  . . . . . . . . . . . .	L Near	 0000026C _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000287 _TEXT	
_CutFunc . . . . . . . . . . . .	P Near	 0000028C _TEXT	Length= 000000DE Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 000002DF _TEXT	
  _continue1 . . . . . . . . . .	L Near	 000002E4 _TEXT	
  _move  . . . . . . . . . . . .	L Near	 00000339 _TEXT	
  _clear . . . . . . . . . . . .	L Near	 00000360 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 00000365 _TEXT	
_DrawData  . . . . . . . . . . .	P Near	 0000061C _TEXT	Length= 00000090 Public STDCALL
  _drawLines . . . . . . . . . .	L Near	 00000651 _TEXT	
  _drawColumns . . . . . . . . .	L Near	 00000657 _TEXT	
  _verifyType  . . . . . . . . .	L Near	 0000065D _TEXT	
  _drawIntegers  . . . . . . . .	L Near	 0000066E _TEXT	
  _drawStrings . . . . . . . . .	L Near	 0000067C _TEXT	
  _drawNothing . . . . . . . . .	L Near	 00000688 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000695 _TEXT	
_DrawPlan  . . . . . . . . . . .	P Near	 00000554 _TEXT	Length= 000000C8 Public STDCALL
  _drawSideBar . . . . . . . . .	L Near	 000005CB _TEXT	
  _drawLines . . . . . . . . . .	L Near	 000005E5 _TEXT	
_IntFunc . . . . . . . . . . . .	P Near	 0000036A _TEXT	Length= 00000037 Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 0000039C _TEXT	
_MaxFunc . . . . . . . . . . . .	P Near	 000003A1 _TEXT	Length= 00000001 Public STDCALL
_MedFunc . . . . . . . . . . . .	P Near	 000003A2 _TEXT	Length= 00000001 Public STDCALL
_MinFunc . . . . . . . . . . . .	P Near	 000003A3 _TEXT	Length= 00000001 Public STDCALL
_OpnFunc . . . . . . . . . . . .	P Near	 000003A4 _TEXT	Length= 00000001 Public STDCALL
_ReadInput . . . . . . . . . . .	P Near	 0000001F _TEXT	Length= 000000CF Public STDCALL
  _l0  . . . . . . . . . . . . .	L Near	 00000061 _TEXT	
  _l1  . . . . . . . . . . . . .	L Near	 0000006B _TEXT	
  _l2  . . . . . . . . . . . . .	L Near	 00000075 _TEXT	
  _l3  . . . . . . . . . . . . .	L Near	 0000007F _TEXT	
  _l4  . . . . . . . . . . . . .	L Near	 00000089 _TEXT	
  _l5  . . . . . . . . . . . . .	L Near	 00000093 _TEXT	
  _l6  . . . . . . . . . . . . .	L Near	 0000009D _TEXT	
  _l7  . . . . . . . . . . . . .	L Near	 000000A7 _TEXT	
  _l8  . . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  _l9  . . . . . . . . . . . . .	L Near	 000000BB _TEXT	
  _lA  . . . . . . . . . . . . .	L Near	 000000C5 _TEXT	
  _lB  . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  _lC  . . . . . . . . . . . . .	L Near	 000000D9 _TEXT	
  _lD  . . . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  _lE  . . . . . . . . . . . . .	L Near	 000000ED _TEXT	
_SavFunc . . . . . . . . . . . .	P Near	 000003A5 _TEXT	Length= 00000001 Public STDCALL
_SetColor1 . . . . . . . . . . .	P Near	 000006AC _TEXT	Length= 0000000B Public STDCALL
_SetColor2 . . . . . . . . . . .	P Near	 000006B7 _TEXT	Length= 0000000B Public STDCALL
_StrFunc . . . . . . . . . . . .	P Near	 000003A6 _TEXT	Length= 00000046 Public STDCALL
  _copy  . . . . . . . . . . . .	L Near	 000003DA _TEXT	
  _error1  . . . . . . . . . . .	L Near	 000003E6 _TEXT	
_SubFunc . . . . . . . . . . . .	P Near	 000003EC _TEXT	Length= 000000B4 Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 0000043B _TEXT	
  _continue1 . . . . . . . . . .	L Near	 0000043D _TEXT	
  _notValid  . . . . . . . . . .	L Near	 0000049B _TEXT	
_SumFunc . . . . . . . . . . . .	P Near	 000004A0 _TEXT	Length= 000000B4 Public STDCALL
  _error1  . . . . . . . . . . .	L Near	 000004EF _TEXT	
  _continue1 . . . . . . . . . .	L Near	 000004F1 _TEXT	
  _notValid  . . . . . . . . . .	L Near	 0000054F _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001F Public STDCALL
  _mainLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  _exitPlan  . . . . . . . . . .	L Near	 00000018 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CELLFOR  . . . . . . . . . . . .	Number	 00000018h   
CELLINT  . . . . . . . . . . . .	Number	 00000001h   
CELLSTR  . . . . . . . . . . . .	Number	 00000005h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SIZECELL . . . . . . . . . . . .	Number	 00000028h   
SIZELINE . . . . . . . . . . . .	Number	 000000F0h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cell01 . . . . . . . . . . . . .	DWord	 0000003F _DATA	
cell02 . . . . . . . . . . . . .	DWord	 00000043 _DATA	
cellName . . . . . . . . . . . .	Byte	 0000003A _DATA	
clearSpace . . . . . . . . . . .	Byte	 0000020B _DATA	
columnBar  . . . . . . . . . . .	Byte	 00000138 _DATA	
currentCell  . . . . . . . . . .	DWord	 0000002A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
functions  . . . . . . . . . . .	Byte	 000001AC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArrow . . . . . . . . . . .	Byte	 00000207 _DATA	
inputError . . . . . . . . . . .	Byte	 0000027A _DATA	
intString1 . . . . . . . . . . .	Byte	 00000032 _DATA	
intString2 . . . . . . . . . . .	Byte	 00000036 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line01 . . . . . . . . . . . . .	CELL	 0000029D _DATA	
line02 . . . . . . . . . . . . .	CELL	 0000038D _DATA	
line03 . . . . . . . . . . . . .	CELL	 0000047D _DATA	
line04 . . . . . . . . . . . . .	CELL	 0000056D _DATA	
line05 . . . . . . . . . . . . .	CELL	 0000065D _DATA	
line06 . . . . . . . . . . . . .	CELL	 0000074D _DATA	
line07 . . . . . . . . . . . . .	CELL	 0000083D _DATA	
line08 . . . . . . . . . . . . .	CELL	 0000092D _DATA	
line09 . . . . . . . . . . . . .	CELL	 00000A1D _DATA	
line10 . . . . . . . . . . . . .	CELL	 00000B0D _DATA	
line11 . . . . . . . . . . . . .	CELL	 00000BFD _DATA	
line12 . . . . . . . . . . . . .	CELL	 00000CED _DATA	
line13 . . . . . . . . . . . . .	CELL	 00000DDD _DATA	
line14 . . . . . . . . . . . . .	CELL	 00000ECD _DATA	
line15 . . . . . . . . . . . . .	CELL	 00000FBD _DATA	
line16 . . . . . . . . . . . . .	CELL	 000010AD _DATA	
line17 . . . . . . . . . . . . .	CELL	 0000119D _DATA	
line18 . . . . . . . . . . . . .	CELL	 0000128D _DATA	
line19 . . . . . . . . . . . . .	CELL	 0000137D _DATA	
line20 . . . . . . . . . . . . .	CELL	 0000146D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
readBuffer . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectdCell  . . . . . . . . . .	Byte	 000001E9 _DATA	
separator  . . . . . . . . . . .	Byte	 00000047 _DATA	
tempBuffer . . . . . . . . . . .	Byte	 00000015 _DATA	
tempCell . . . . . . . . . . . .	DWord	 0000002E _DATA	
teste  . . . . . . . . . . . . .	Byte	 0000155D _DATA	
titlePlan  . . . . . . . . . . .	Byte	 000000C1 _DATA	
viewFunc . . . . . . . . . . . .	Byte	 000001FE _DATA	
whiteLine  . . . . . . . . . . .	Byte	 00000211 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
